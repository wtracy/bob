#!/usr/bin/python

import glob, os, sys


def isOnline(ac):
	online = open(ac + '/online', 'r').readline()
	return online == '1\n'

def onAc(cables):
	for ac in cables:
		if (not isOnline(ac)):
			return False
	return True

def getCharge(bat):
	max = int(open(bat + '/charge_full', 'r').readline())
	curr = int(open(bat + '/charge_now', 'r').readline())
	charge = 100 * curr / max
	return charge

def getCableStatus(ac):
	online = open(ac + '/online', 'r').readline()
	if (online == '1\n'):
		return 'on-line'
	elif online == '0\n':
		return 'off-line'
	else:
		return 'read error'

def getBatteryStatus(bat):
	return open(bat + '/status', 'r').readline().strip()

def output():
	if 'GATEWAY_INTERFACE' in os.environ.keys():
		print 'Content-type: text/html\n'
		print '<html><head><title>BOB: Power status for'
		print os.environ.get('SERVER_NAME')
		print '</title><meta http-equiv="refresh" content="30" /></head><body>'
		#print '<table rules="rows" frame="box">'
		print '<table>'
		html = True
	else:
		html = False
	index = 0
	for ac in cables:
		status = getCableStatus(ac)
		if html:
			print '<tr><td align="right">AC Adapter ' + repr(index) + ': </td>'
			if status == 'on-line':
				print '<td bgcolor="00FF00">'
			else:
				print '<td bgcolor="FF0000"><b><blink>'
		
			print status 
			if status != 'on-line':
				print '</blink></b>'
			print '</td></tr>'
		else:
			print '  AC Adapter' + (repr(index).rjust(2)) + ': ' + status
		++index
	index = 0
	for bat in batteries:
		status = getBatteryStatus(bat)
		charge = getCharge(bat)
		if html:
			if charge > 75:
				color = '#00FF00'
			elif charge > 50:
				color = '#FFFF00'
			elif charge > 25:
				color = '#FF8000'
			else:
				color = '#FF0000'
			print '<tr><td align="right">Battery ' + repr(index) + ': </td><td bgcolor="' + color + '">' + status + ', ' + repr(charge) + '%</td></tr>'
		else:
			print '     Battery' + (repr(index).rjust(2)) + ': ' + status + ', ' + repr(charge) + '%'
		++index
	if html:
		print '</table></body></html>'

class BobGtk:
   def quit(self, param):
      return gtk.main_quit()

   def contextMenu(self, icon, button, activate_time, data=None):
       self.menu.popup(None, None, gtk.status_icon_position_menu, button, activate_time, icon)
       return True

   def timeout(self):
       if (onAc(cables)):
           self.tray.set_from_file('plug.png')
       else:
           self.tray.set_from_file('laptop_battery.png')
       text = ''
       index = 0
       for ac in cables:
           status = getCableStatus(ac)
           text += 'AC Adapter ' + (repr(index)) + ': ' + status + '\n'
           ++index
       index = 0
       for bat in batteries:
           status = getBatteryStatus(bat)
           charge = getCharge(bat)
           text += 'Battery ' + repr(index) + ': ' + status + ', ' + repr(charge) + '%\n'
           ++index
       text = text.strip()
       self.tray.set_tooltip(text)
       if (not onAc(cables) and self.alert.get_active()):
         self.tray.set_blinking(True)
         if (player.get_state() != gst.STATE_PLAYING):
           player.set_state(gst.STATE_PLAYING)
       else:
         self.tray.set_blinking(False)
         player.set_state(gst.STATE_NULL)

       return True

   def alertToggled(self, alert):
      config.set('alert', 'enabled', self.alert.get_active())
      config.write(open(userConfigPath, 'w'))

   def __init__(self):
       self.menu = gtk.Menu()
       self.alert = gtk.CheckMenuItem('Alert on battery power')
       self.alert.set_active(config.getboolean('alert', 'enabled'))
       self.menu.append(self.alert)
       self.alert.connect('toggled', self.alertToggled)
       one = gtk.ImageMenuItem(gtk.STOCK_QUIT, "Quit")
       one.connect('activate', self.quit)
       self.menu.append(one)
       self.menu.show_all()

       self.tray = gtk.StatusIcon()
       self.tray.set_from_file('plug.png')
       self.tray.connect('popup-menu', self.contextMenu)
       gobject.timeout_add(1000, self.timeout)

def getConfig():
	import ConfigParser, os

	config = ConfigParser.ConfigParser()
	config.read(['/etc/bob.conf', userConfigPath])


	if (not config.has_section('alert')):
		config.add_section('alert')
	if (not config.has_option('alert', 'enabled')):
		config.set('alert', 'enabled', '0')
	return config

def playerbinMessage(bus, message):
	t = message.type
	if t == gst.MESSAGE_EOS:
		player.set_state(gst.STATE_NULL)
		time.sleep(0.1)
		player.set_state(gst.STATE_PLAYING)
	elif t == gst.MESSAGE_ERROR:
		print "Gstreamer Error: %S" % err, debug

batteries = glob.glob('/sys/class/power_supply/BAT*')
cables = glob.glob('/sys/class/power_supply/AC*')

userConfigPath = os.path.expanduser('~/.bob.conf')

if '-x' in sys.argv:
	config = getConfig()

	import pygtk
	pygtk.require("2.0")
	import gtk
	import gobject

	bobgtk = BobGtk()

	import pygst
	pygst.require("0.10")
	import gst
	import time

	player = gst.element_factory_make("playbin2", "player")
	fakesink = gst.element_factory_make("fakesink", "fakesink")
	player.set_property("video-sink", fakesink)
	player.set_property("uri", "file://" + os.path.abspath("alertloop.mp3"))
	bus = player.get_bus()
	bus.add_signal_watch()
	bus.connect("message", playerbinMessage)

	gtk.gdk.threads_init()
	gtk.main()
else:
	output()
